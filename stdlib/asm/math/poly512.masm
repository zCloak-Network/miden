use.std::math::ntt512
use.std::math::u64

#! Given two consecutive words on stack, this routine performs
#! element wise multiplication, while keeping resulting single
#! word on stack.
#!
#! Expected stack state looks like
#!
#! [a0, a1, a2, a3, b0, b1, b2, b3]
#!
#! What this routine does is
#!
#! c`i` = a`i` * b`i` mod P | i ∈ [0, 4), P = 2 ^ 64 - 2 ^ 32 + 1
#!
#! Output stack state looks like
#!
#! [c0, c1, c2, c3]
proc.mul_word
    movup.4
    mul
    movdn.6

    movup.3
    mul
    movdn.5

    movup.2
    mul
    movdn.4

    mul
    movdn.3
end

#! Given two consecutive words on stack, this routine performs
#! element wise addition, while keeping resulting single
#! word on stack.
#!
#! Expected stack state looks like
#!
#! [a0, a1, a2, a3, b0, b1, b2, b3]
#!
#! What this routine does is
#!
#! c`i` = a`i` + b`i` mod P | i ∈ [0, 4), P = 2 ^ 64 - 2 ^ 32 + 1
#!
#! Output stack state looks like
#!
#! [c0, c1, c2, c3]
proc.add_word
    movup.4
    add
    movdn.6

    movup.3
    add
    movdn.5

    movup.2
    add
    movdn.4

    add
    movdn.3
end

#! Given dividend ( i.e. field element a ) on stack top, this routine computes c = a % 12289
#!
#! Expected stack state
#!
#! [a, ...]
#!
#! Output stack state looks like
#!
#! [c, ...] | c = a % 12289
export.mod_12289
    u32split
    push.12289.0

    adv.u64div

    adv_push.2
    u32assert.2

    swap
    push.12289
    u32overflowing_mul

    movup.2
    push.12289
    u32overflowing_madd
    drop

    adv_push.2
    drop
    u32assert

    dup

    movup.3
    u32overflowing_add

    movup.3
    u32overflowing_add
    drop

    movup.5
    assert_eq
    movup.4
    assert_eq

    swap
    drop
    swap
    drop
end

#! Given four elements on stack top, this routine reduces them by applying
#! modular division by 12289 ( = Falcon Signature Algorithm's Prime Number )
#!
#! Input stack state :
#!
#! [a0, a1, a3, a3, ...]
#!
#! Operated such that
#!
#! b`i` = a`i` % 12289 | i ∈ [0..4)
#!
#! Output stack state :
#!
#! [b0, b1, b2, b3, ...]
proc.mod_12289_word
    exec.mod_12289

    swap
    exec.mod_12289
    swap

    movup.2
    exec.mod_12289
    movdn.2

    movup.3
    exec.mod_12289
    movdn.3
end

#! Given an operand on stack, this routine negates the element, using modular arithmetic
#! over Falcon Digital Signature Algorithm's prime field = 12289.
#!
#! All this routine does is
#!
#! b = (0 - a) % Q
#!   = Q - a % Q | Q = 12289
#!
#! Input stack state
#!
#! [a,  ...]
#!
#! Output stack state looks like
#!
#! [b, ...] | b ∈ [0..12289)
proc.neg
    exec.mod_12289

    push.12289
    swap
    sub
end

#! Given four elements on stack, this routine negates those, using modular arithmetic
#! over Falcon Digital Signature Algorithm's prime field = 12289.
#!
#! All this routine does is
#!
#! b`i` = (0 - a`i`) % Q
#!   = Q - a`i` % Q | Q = 12289 & i ∈ [0..4)
#!
#! Input stack state
#!
#! [a0, a1, a2, a3, ...]
#!
#! Output stack state looks like
#!
#! [b0, b1, b2, b3 ...] | b`i` ∈ [0..12289)
proc.neg_word
    exec.neg

    swap
    exec.neg
    swap

    movup.2
    exec.neg
    movdn.2

    movup.3
    exec.neg
    movdn.3
end

#! Given a field element, this routine does centered reduction using Miden VM
#! prime ( say Q ) and then reduces it using Falcon Post Quantum Digital
#! Signature Algorithm prime ( say Q' )
#!
#! Q = 2 ^ 64 - 2 ^ 32 + 1
#! Q' = 12289
#!
#! Expected stack state
#!
#! [a, ...]
#!
#! All this routine does is
#!
#! if a > (Q >> 1):
#!   b = (a - Q) % Q'
#! else:
#!   b = a % Q'
#!
#! Final stack state looks like
#!
#! [b, ...]
proc.reduce
    dup
    push.9223372034707292160
    gt

    if.true
        exec.mod_12289

        dup
        push.7002
        u32unchecked_gte

        if.true
            sub.7002
        else
            push.7002
            swap
            sub

            push.12289
            swap
            sub
        end
    else
        exec.mod_12289
    end
end

#! Reduces four consecutive elements living on stack top using `reduce` routine ( defined above )
#!
#! Expected stack state
#!
#! [a0, a1, a2, a3, ...]
#!
#! What this routine does is
#!
#! b`i` = reduce(a`i`)
#!
#! Final stack state looks like
#!
#! [b0, b1, b2, b3, ...]
proc.reduce_word
    exec.reduce

    swap
    exec.reduce
    swap

    movup.2
    exec.reduce
    movdn.2

    movup.3
    exec.reduce
    movdn.3
end

#! Given two polynomials of degree 512 on stack as absolute memory addresses,
#! this routine computes polynomial multiplication, using NTT and iNTT.
#!
#! Imagine, two polynomials are f, g
#!
#! h = f . g, can be computed using
#!
#! iNTT(NTT(f) * NTT(g))
#!
#! Note, * -> element wise multiplication of polynomial coefficients in NTT domain
#!
#! Input stack state :
#!
#! [f_start_addr, g_start_addr, h_start_addr, ...]
#!
#! - {f, g, h}_addr`i` -> {f, g, h}[ (i << 2) .. ((i+1) << 2) ), address holding four consecutive coefficients
#! - {f, g, h}_addr0 -> {f, g, h}_start_addr
#!
#! Output stack state :
#!
#! [ ... ]
#!
#! Consecutive 127 memory addresses can be computed from starting memory address ( living on stack top ) by
#! continuing to apply `INCR` ( = add.1 ) instruction on previous absolute memory address.
#!
#! Note, input memory addresses are considered to be read-only, they are not mutated.
export.mul_zq.128
    exec.ntt512::forward

    locaddr.0
    push.0.0.0.0

    repeat.128
        dup.5
        mem_loadw

        dup.4
        mem_storew

        movup.5
        add.1
        movdn.5

        movup.4
        add.1
        movdn.4
    end

    dropw
    drop
    drop

    exec.ntt512::forward

    locaddr.0
    push.0.0.0.0.0.0.0.0

    repeat.128
        dup.9
        mem_loadw

        swapw

        dup.8
        mem_loadw

        exec.mul_word

        dup.4
        mem_storew

        movup.5
        add.1
        movdn.5

        movup.4
        add.1
        movdn.4

        push.0.0.0.0
    end

    dropw
    dropw
    drop
    drop

    locaddr.0

    exec.ntt512::backward

    push.0.0.0.0

    repeat.128
        dup.4
        mem_loadw

        exec.reduce_word

        dup.5
        mem_storew

        movup.5
        add.1
        movdn.5

        movup.4
        add.1
        movdn.4
    end

    dropw
    drop
    drop
end

#! Given two polynomials of degree 512 on stack as absolute memory addresses,
#! this routine computes polynomial addition.
#!
#! Imagine, two polynomials f, g
#!
#! h = f + g, can be computed as
#!
#! [(f[i] + g[i]) % Q for i in range(512)] | Q = 12289 ( = Falcon Digital Signature Algorithm's Prime Number )
#!
#! Input stack state :
#!
#! [f_start_addr, g_start_addr, h_start_addr, ...]
#!
#! - {f, g, h}_addr`i` -> {f, g, h}[ (i << 2) .. ((i+1) << 2) ), address holding four consecutive coefficients
#! - {f, g, h}_addr0 -> {f, g, h}_start_addr
#!
#! Output stack state :
#!
#! [ ... ]
#!
#! Consecutive 127 memory addresses can be computed from starting memory address ( living on stack top ) by
#! continuing to apply `INCR` ( = add.1 ) instruction on previous absolute memory address.
#!
#! Note, input memory addresses are considered to be read-only, they are not mutated.
export.add_zq
    push.0.0.0.0.0.0.0.0

    repeat.128
        dup.8
        mem_loadw

        swapw

        dup.9
        mem_loadw

        exec.add_word
        exec.mod_12289_word

        dup.6
        mem_storew

        movup.6
        add.1
        movdn.6

        movup.5
        add.1
        movdn.5

        movup.4
        add.1
        movdn.4

        push.0.0.0.0
    end

    push.0
    dropw
    dropw
    dropw
end

#! Given one polynomial of degree 512 on stack as absolute memory addresses,
#! this routine negates each coefficient of that polynomial.
#!
#! Imagine, polynomial f
#!
#! g = -f, can be computed as
#!
#! [(-f[i]) % Q for i in range(512)] | Q = 12289 ( = Falcon Digital Signature Algorithm's Prime Number )
#!
#! Input stack state :
#!
#! [f_start_addr, g_start_addr, ...]
#!
#! - {f,g}_addr`i` -> {f,g}[ (i << 2) .. ((i+1) << 2) ), address holding four consecutive coefficients
#! - {f,g}_addr0 -> {f,g}_start_addr
#!
#! Output stack state :
#!
#! [ ... ]
#!
#! Consecutive 127 memory addresses can be computed from starting memory address ( living on stack top ) by
#! continuing to apply `INCR` ( = add.1 ) instruction on previous absolute memory address.
#!
#! Note, input memory addresses are considered to be read-only, they are not mutated.
export.neg_zq
    push.0.0.0.0

    repeat.128
        dup.4
        mem_loadw

        exec.neg_word

        dup.5
        mem_storew

        movup.5
        add.1
        movdn.5

        movup.4
        add.1
        movdn.4
    end

    dropw
    drop
    drop
end

#! Given two polynomials of degree 512 on stack as absolute memory addresses,
#! this routine subtracts second polynomial from first one.
#!
#! Imagine, two polynomials f, g
#!
#! h = f - g, can be computed as
#!
#! [(f[i] - g[i]) % Q for i in range(512)] | Q = 12289 ( = Falcon Digital Signature Algorithm's Prime Number )
#!
#! Input stack state :
#!
#! [f_start_addr, g_start_addr, h_start_addr ...]
#!
#! - {f, g, h}_addr`i` -> {f, g, h}[ (i << 2) .. ((i+1) << 2) ), address holding four consecutive coefficients
#! - {f, g, h}_addr0 -> {f, g, h}_start_addr
#!
#! Output stack state :
#!
#! [ ... ]
#!
#! Consecutive 127 memory addresses can be computed from starting memory address ( living on stack top ) by
#! continuing to apply `INCR` ( = add.1 ) instruction on previous absolute memory address.
#!
#! Note, input memory addresses are considered to be read-only, they are not mutated.
export.sub_zq.128
    locaddr.0
    movup.2
    exec.neg_zq

    locaddr.0
    exec.add_zq
end
